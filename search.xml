<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Debian 安装使用 Cloud内核降低内存消耗</title>
    <url>/posts/42836.html</url>
    <content><![CDATA[<p>最近为 Vultr 主机升级到 Debian 11，升级之后发现内存的消耗很多，基本上运行的应用很容易会被 Stop。</p>
<p>512M 内存明显不够，直到有人在 hostloc 论坛上安利了 cloud 内核，安装之后内存占用明显下降。</p>
<h3 id="更新系统和安装最新软件"><a href="#更新系统和安装最新软件" class="headerlink" title="更新系统和安装最新软件"></a>更新系统和安装最新软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update -y &amp;&amp; apt dist-upgrade -y</span><br></pre></td></tr></table></figure>

<h3 id="查看系统现在内核情况"><a href="#查看系统现在内核情况" class="headerlink" title="查看系统现在内核情况"></a>查看系统现在内核情况</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">~# </span><span class="language-bash">dpkg -l|grep linux-image</span></span><br><span class="line"></span><br><span class="line">linux-image-5.10.0-20-amd64          5.10.158-2                      amd64        Linux 5.10 for 64-bit PCs (signed)</span><br><span class="line">linux-image-5.10.0-21-amd64          5.10.162-1                      amd64        Linux 5.10 for 64-bit PCs (signed)</span><br><span class="line">linux-image-amd64                    5.10.162-1                      amd64        Linux for 64-bit PCs (meta-package)</span><br></pre></td></tr></table></figure>

<h3 id="查看-cloud-内核版本"><a href="#查看-cloud-内核版本" class="headerlink" title="查看 cloud 内核版本"></a>查看 cloud 内核版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">~# </span><span class="language-bash">apt-cache search linux-image | grep cloud</span></span><br><span class="line"></span><br><span class="line">linux-headers-6.1.0-7-cloud-amd64 - Header files for Linux 6.1.0-7-cloud-amd64</span><br><span class="line">linux-image-6.1.0-7-cloud-amd64-dbg - Debug symbols for linux-image-6.1.0-7-cloud-amd64</span><br><span class="line">linux-image-6.1.0-7-cloud-amd64-unsigned - Linux 6.1 for x86-64 cloud</span><br><span class="line">linux-image-cloud-amd64-dbg - Debugging symbols for Linux cloud-amd64 configuration (meta-package)</span><br><span class="line">linux-image-6.1.0-7-cloud-amd64 - Linux 6.1 for x86-64 cloud (signed)</span><br><span class="line">linux-image-cloud-amd64 - Linux for x86-64 cloud (meta-package)</span><br></pre></td></tr></table></figure>

<h3 id="安装-Cloud-内核"><a href="#安装-Cloud-内核" class="headerlink" title="安装 Cloud 内核"></a>安装 Cloud 内核</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install linux-headers-6.1.0-7-cloud-amd64  \</span><br><span class="line">    linux-image-cloud-amd64 -y</span><br></pre></td></tr></table></figure>

<p>或者使用官方源的简单安装，不安装内核头文件只安装内核</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install linux-image-cloud-amd64 -y</span><br></pre></td></tr></table></figure>

<h3 id="更新引导文件"><a href="#更新引导文件" class="headerlink" title="更新引导文件"></a>更新引导文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>

<h3 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h3 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<h3 id="卸载旧内核"><a href="#卸载旧内核" class="headerlink" title="卸载旧内核"></a>卸载旧内核</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg --get-selections | grep linux</span><br><span class="line">apt autoremove --purge linux-image-5.10.0-20-amd64</span><br><span class="line">apt autoremove --purge linux-image-5.10.0-21-amd64</span><br><span class="line">apt autoremove</span><br><span class="line">apt autoclean</span><br></pre></td></tr></table></figure>

<h4 id="cloud-内核简介"><a href="#cloud-内核简介" class="headerlink" title="cloud 内核简介"></a>cloud 内核简介</h4><p>cloud 内核是专门为云平台优化的，Cloud 内核剔除了这些无用模块的同时添加了几乎只有云平台会用到的驱动程序。裁剪掉云环境下用不到的像蓝牙、声音的支持等等这些。在 <strong>KVM&#x2F;Xen</strong> 虚拟化的机器中，<strong>cloud 内核</strong>表现良好。已测试不支持 <strong>VMware</strong> 虚拟化，会找不到根文件系统。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Debian</tag>
        <tag>cloud内核</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Compose 限制CPU和内存使用</title>
    <url>/posts/5770415d.html</url>
    <content><![CDATA[<p>最近在尝试自建<code>gitlab</code> 过程中，发现该容器内存占用很高，导致服务器的 MySQL 服务经常被 kill。导致本机服务器的其他服务无法正常使用。</p>
<p>在搜索引擎一顿探索后，给我感觉是很乱。下面总结一下尝试的结果。</p>
<h3 id="CPU-和内存限制"><a href="#CPU-和内存限制" class="headerlink" title="CPU 和内存限制"></a>CPU 和内存限制</h3><p>在<code>compse.yml</code>文件添加<code>services.deploy</code>内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">cpus:</span> <span class="string">&quot;0.50&quot;</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">2048M</span></span><br><span class="line">    <span class="attr">reservations:</span></span><br><span class="line">      <span class="attr">cpus:</span> <span class="string">&quot;0.25&quot;</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">1024M</span></span><br></pre></td></tr></table></figure>

<p>以我安装的<code>gitlab</code>为例</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;gitlab/gitlab-ce:latest&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">&quot;gitlab.admin.com&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&quot;0.50&quot;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">2048M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&quot;0.25&quot;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">1024M</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1080:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10443:443&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;11022:22&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/gitlab-date/config:/etc/gitlab&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/gitlab-date/logs:/var/log/gitlab&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/gitlab-date/data:/var/opt/gitlab&quot;</span></span><br></pre></td></tr></table></figure>

<p>限制命令在<code>deploy.resources.limits</code> 这部分，上面限制的注释是：</p>
<blockquote>
<p>限制 CPU 使用率 50%，限制 内存 使用率 2048M。同时，这个服务至少需要 25%的 CPU 和 1024M 的内存。</p>
</blockquote>
<p>启动的时候命令行也有所改变，否则不生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">原本的启动命令为</span></span><br><span class="line">docker-compse up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要添加一个参数--compatibility表示以兼容模式来运行</span></span><br><span class="line">docker-compose --compatibility up -d</span><br></pre></td></tr></table></figure>

<p>需要注意的是，启动时需增加 –compatibility 选项,以兼容模式来运行。</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>通过上述方法限制容器 CPU 和内存后，再继续使用命令 <code>docker stats</code> 查看容器资源使用情况</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitea Actions 初体验</title>
    <url>/posts/34869306.html</url>
    <content><![CDATA[<p>Gitea Actions 基本上和 Github Actions 一样的语法，兼容 Github 的 actions 软件包，经过我的测试有一些 actions 的包是不能运行的。</p>
<blockquote>
<p>Gitea 行动的目的是在 Gitea 和现有的 CI&#x2F;CD 系统之间实现更紧密的集成。另一个目标是为独立运行器提供统一的管理界面，以减少支持多个系统的管理开销（如果需要）。独立运行器工作流旨在与 GitHub Actions 兼容，可用于在 Gitea 上构建、测试、打包、发布或部署任何代码项目。</p>
</blockquote>
<p>Gitea Actions 不仅仅是 DevOps，还允许您在存储库中发生其他事件时运行工作流。例如，您可以运行工作流，以便在有人在您的存储库中创建新问题时自动添加相应的标签。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 Gitea 1.19.0 及以上版本，未安装的请参考 <a href="https://docs.gitea.com/zh-cn/">Gitea Docs</a></p>
<p>这里我使用宝塔面板和腾讯云的服务器，提前在面板安装好 Docker 环境。</p>
<ol>
<li>Gitea 开启 actions 选项</li>
</ol>
<p>actions 的配置默认是禁用的，需要修改文件进行开启，修改<code>gitea/config/app.ini</code> 配置文件,修改完成之后建议重启一下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启actions</span></span><br><span class="line">[<span class="string">actions</span>]</span><br><span class="line"><span class="string">ENABLED</span> <span class="string">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看 Gitea Runner token</li>
</ol>
<p>管理后台 - Actions -Runners - 创建 Runner - 这里有 <code>token</code> 要记下来后面会用到。</p>
<p><img src="https://img.jinjun.top/images/2023/11/13/e2328f8959daa7abad4dfb8b4b5eb815.jpg#id=eiEHP&originHeight=685&originWidth=1465&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<ol start="3">
<li>安装 act runner</li>
</ol>
<p>使用 docker compose 启动，在 gitea 的目录下新建一个<code>cet runner</code>文件夹添加<code>docker-compose.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">act_runner:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/act_runner:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA_INSTANCE_URL=https://192.168.0.1:3000/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA_RUNNER_REGISTRATION_TOKEN=5NwZolPXGrRZ</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GITEA_RUNNER_NAME=docker_runner</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./act_data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./ct_cache:/root/.cache</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>GITEA_INSTANCE_URL</code> 是 gitea 的地址</li>
<li><code>GITEA_RUNNER_REGISTRATION_TOKEN</code> 填写你获取的 token</li>
</ul>
<ol start="4">
<li>查看是否添加成功</li>
</ol>
<p>在 runner 管理面板即可看见新加入的 runner 的状态。</p>
<p><img src="https://img.jinjun.top/images/2023/11/13/8315880534ece6313b89c0c3d2976d8b.jpg#id=WT2AK&originHeight=259&originWidth=1075&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li>创建仓库</li>
</ol>
<p>创建一个<code>demo</code>的测试仓库，让我们来尝鲜一下吧。</p>
<p><img src="https://img.jinjun.top/images/2023/11/13/b2c64d70502ac1ec6e556d3dcfec1b0a.jpg#id=qrTLw&originHeight=671&originWidth=996&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<ol start="2">
<li>添加工作流文件</li>
</ol>
<p>以下为官方的一个实例，将它保存至 <code>.gitea/workflows/build.yaml</code> 会触发 CI 工作。，yaml 语法可参考 <a href="https://docs.github.com/zh/actions/using-workflows/workflow-syntax-for-github-actions">Github Actions Docs</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Gitea</span> <span class="string">Actions</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">run-name:</span> <span class="string">$&#123;&#123;</span> <span class="string">gitea.actor</span> <span class="string">&#125;&#125;</span> <span class="string">is</span> <span class="string">testing</span> <span class="string">out</span> <span class="string">Gitea</span> <span class="string">Actions</span> <span class="string">🚀</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">Explore-Gitea-Actions:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;🎉 The job was automatically triggered by a $<span class="template-variable">&#123;&#123; gitea.event_name &#125;&#125;</span> event.&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;🐧 This job is now running on a $<span class="template-variable">&#123;&#123; runner.os &#125;&#125;</span> server hosted by Gitea!&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;🔎 The name of your branch is $<span class="template-variable">&#123;&#123; gitea.ref &#125;&#125;</span> and your repository is $<span class="template-variable">&#123;&#123; gitea.repository &#125;&#125;</span>.&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">repository</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;💡 The $<span class="template-variable">&#123;&#123; gitea.repository &#125;&#125;</span> repository has been cloned to the runner.&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;🖥️ The workflow is now ready to test your code on the runner.&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">List</span> <span class="string">files</span> <span class="string">in</span> <span class="string">the</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          ls $&#123;&#123; gitea.workspace &#125;&#125;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;🍏 This job&#x27;s status is $<span class="template-variable">&#123;&#123; gitea.status &#125;&#125;</span>.&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看执行结果</li>
</ol>
<p><img src="https://img.jinjun.top/images/2023/11/13/5648a0ed12a86379c3994fc5107b2b2f.jpg#id=BGqkG&originHeight=770&originWidth=1126&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>来自以下文献：</p>
<ul>
<li><a href="https://seepine.com/git/gitea/actions/">Gitea Actions 搭建 - Seepine’s Blog</a></li>
<li><a href="https://gitea.com/gitea/act_runner/issues/70">#70 - setup-java download jdk binary again every time due to not cache tool folder</a></li>
<li><a href="https://docs.gitea.com/zh-cn/usage/actions/quickstart">快速入门 | Gitea Documentation</a></li>
<li><a href="https://qiita.com/sinsky/items/5ab6017f82548f9e35e6">我在 docker 环境中尝试了 Gitea Actions #Docker - Qiita</a></li>
</ul>
]]></content>
      <categories>
        <category>折腾日志</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gitea</tag>
        <tag>Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/1243066710.html</url>
    <content><![CDATA[<h2 id="你好，世界！您好，欢迎来访的朋友们！欢迎来到我的小世界！"><a href="#你好，世界！您好，欢迎来访的朋友们！欢迎来到我的小世界！" class="headerlink" title="你好，世界！您好，欢迎来访的朋友们！欢迎来到我的小世界！"></a>你好，世界！您好，欢迎来访的朋友们！欢迎来到我的小世界！</h2><p>本站使用 <code>Hexo</code>搭建，并使用 <code>GitHub Actions</code>进行自动化部署。希望给各位带来不错的体验！</p>
<p>以下为 <code>Hexo</code>的经典开场白！</p>
<hr>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo 部署 Github Pages</title>
    <url>/posts/39428.html</url>
    <content><![CDATA[<p>之前已经完成了本地化的部署，本地化只能自己欣赏，如果想要分享知识给其他人就必须要发布发布到公网上，供各位小伙伴观摩学习提出宝贵意见。</p>
<p>可以白嫖的平台有<code>Github pages</code>、<code>Netlify</code>、<code>Vercel</code>，这里使用的是<code>GitHub pages</code>托管静态网页。</p>
<h1 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>如果没有注册账号，请前往<a href="https://www.github.com/">Github</a> 注册一个自己的账号。</li>
<li>新建一个公开仓库，仓库名格式为 <code>username.github.io</code> 假如你的 Github 用户名为 <code>hexoxo</code> ，那么你这个仓库地址应该是 <code>hexoxo.github.io</code></li>
<li>创建完成后，记下该仓库的 HTTPS&#x2F;SSH 地址，格式一般为 <code>https://github.com/hexoxo/hexoxo.github.io.git</code> 复制下来，下一步会用到。</li>
</ol>
<h3 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h3><p>如果你只是本地化部署了，并没有配置过你的 Git 和 GitHub 进行联动，如果设置了可以跳过。那接下来就是设置 Git 用户名和邮箱，在 <code>Git Bash</code> 里执行两条命令设置你的 git name 和 email。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;user_name&quot;</span><br><span class="line">git config --global user.email emal@xx.com</span><br></pre></td></tr></table></figure>

<ul>
<li><code>user_name</code> 代表你的用户名</li>
<li><code>email@xx.com</code> 代表你的邮箱地址</li>
</ul>
<p>用户名和邮箱建议根据你注册的 Github 的信息来进行修改，避免出错。</p>
<p>如果本地想和 GitHub 握手连接，还需要一把钥匙。下来就进行生成密匙。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;email@xx.com&quot;</span><br></pre></td></tr></table></figure>

<p>生成的过程会有提示，直接按三次回车即可。</p>
<p>生成的 rsa 私钥和 pub 公钥会存放在 <code>~/.ssh</code> 目录下面。</p>
<p>打开 <a href="https://github.com/settings/profile">GitHub settings</a> , 再找到 <a href="https://github.com/settings/keys">SSH and GPG keys</a> ,新建一个新的 SSH-点击<code>SSH keys</code> - <code>Title</code> 自己随便填一个。</p>
<p>在 <code>Git Bash</code> 查看公钥文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>将输出的内容，复制粘贴到 <code>Key</code> 里面，点击 <code>add SSH key</code> 进行保存。</p>
<p>接下来就是测试钥匙是否能打开 Github 的大门。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>如果出现你的 name，那就是成功了。类似下面的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi hexoxo! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<h3 id="安装-Hexo-依赖"><a href="#安装-Hexo-依赖" class="headerlink" title="安装 Hexo 依赖"></a>安装 Hexo 依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure>

<p>安装完毕后，打开 hexo 的配置文件 <code>_config.yml</code> 修改 <code>deploy</code> 的配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: &#x27;git&#x27;</span><br><span class="line">  repo: &#x27;git@github.com:hexoxo/hexoxo.github.io&#x27;</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<p><code>repo</code> 修改为自己的公开仓库地址。<br><code>branch</code> 修改为项目的分支地址，一般都是 main</p>
<p>完成之后，就测试部署上传。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>稍后就一会，可以在 GitHub 的项目地址看看是否上传了网页文件，有文件后，可以在浏览器打开 <code>http://name.github.io</code> 请将<code>name</code> 替换成自己的用户名，就可以看到你的博客啦。</p>
<h2 id="开始编写"><a href="#开始编写" class="headerlink" title="开始编写"></a>开始编写</h2><p>博客搭好了，就可以撰写文章了。下面简单写一下！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post &#x27;hello 我的小伙伴&#x27;</span><br></pre></td></tr></table></figure>

<p>这样就在 <code>/soure/_posts</code> 下找到名为<del>hello 我的小伙伴</del>文章了，撰写按照 Markdown 格式进行排版，语法还是很简单，花几分钟记一下格式就好了。</p>
<p>编写完成后，在 <code>Git Bash</code> 执行以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>这样可以在本地进行预览，地址为 <code>localhost:4000</code> ,预览没有问题再进行部署到 Github 上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这样就可以进行远程部署了。</p>
<h3 id="Pages-自定义域名"><a href="#Pages-自定义域名" class="headerlink" title="Pages 自定义域名"></a>Pages 自定义域名</h3><p>在你的目录找到 <code>setting</code> - <code>Pages</code> - <code>Custom domain</code> - <code>输入你的自定义域名</code> - <code>save</code> 即可。</p>
<p>然后在域名的 DNS 系统，创建 cname 即可指向你的博客地址。</p>
<p>自定义域名有时候会莫名其妙的丢失，这个问题可以在仓库的根目录下创建一个<code>CNAME</code> 的文件，编辑内容为你的自定义域名。这样本地推送的时候就不会莫名其妙的丢失绑定的域名了。</p>
]]></content>
      <categories>
        <category>博客构建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客添加自定义CSS、JS、字体文件</title>
    <url>/posts/40906.html</url>
    <content><![CDATA[<blockquote>
<p>如果想 DIY 美化和魔改，基本上都涉及到自定义 CSS 和 JS 文件。如果直接修改主题文件，下次更新主题涉及大更新的时候，可能修改的地方就无效了。<br>主题来自：<a href="https://docs.anheyu.com/">安知鱼 Docs</a> &#x2F; <a href="https://butterfly.js.org/">Butterfly</a></p>
</blockquote>
<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>在博客的根目录下的 <code>source</code> 文件夹，还有一个是 <code>themes</code> 的 <code>source</code> 文件夹（来自主题，但是不推荐放在那里）</p>
<p>在里面创建好所需要的文件夹，例如 css、js、img、fonts 等等这些文件夹，还有其他的配置文件可以自行创建。</p>
<p><img src="https://img.jinjun.top/images/2023/08/25/8bb99054f026cc060f3ed6aef9b081a4.png#id=c8CsP&originHeight=419&originWidth=259&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>我这里为了不要这么乱，所以把所有 DIY 文件归类到<code>config</code> 目录下</p>
<h2 id="引用自定义文件"><a href="#引用自定义文件" class="headerlink" title="引用自定义文件"></a>引用自定义文件</h2><p>直接在主题的配置文件即可，我的安知鱼主题文件为 <code>_config.anzhiyu.yml</code> &#x2F; Butterfly 的配置为 <code>_config.butterfly.yml</code> ，如果没有在根目录下创建过配置文件，可以在主题文件下找到 <code>_config.yml</code></p>
<p>在主题配置文件中找到配置<code>inject</code></p>
<p>css 文件一般在 <code>head</code> 引入，js 文件一般在 <code>bottom</code>引入，特色情况除外。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># 自定义css</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/custom.css&quot; media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># 自定义js</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;/js/xxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果引入多个文件可以往后添加一行</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">head:</span></span><br><span class="line">  <span class="comment"># 自定义css</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;&gt;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/fonts.css&quot;&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客构建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>基于宝塔面板 Docker 安装 Gitea</title>
    <url>/posts/fff93366.html</url>
    <content><![CDATA[<p>本文使用最新版本的宝塔面板、docker 环境、Nginx 用于反代、Debian 12</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么要自建 git 托管，众所周知在国内网络的环境的情况下，github 已经不能正常的使用，有时候会出现断联的情况。国内的很多都有条条框框的限制，基于这个需求，为什么不自建属于自己的 git 托管。</p>
<p>首先我尝试了：gitea、gitlab、gogs 这三款软件，综合性能分析，日常使用 Gitea 能满足我的需求，内存占用也低，也轻量化。</p>
<h2 id="Gitea-简介"><a href="#Gitea-简介" class="headerlink" title="Gitea 简介"></a>Gitea 简介</h2><p>Gitea 的首要目标是创建一个极易安装，运行非常快速，安装和使用体验良好的自建 Git 服务。我们采用 Go 作为后端语言，这使我们只要生成一个可执行程序即可。并且他还支持跨平台，支持 Linux, macOS 和 Windows 以及各种架构，除了 x86，amd64，还包括 ARM 和 PowerPC。</p>
<p>官网文档地址：<a href="https://docs.gitea.com/zh-cn/next/">gitea DOCS</a></p>
<h3 id="Gitea-安装"><a href="#Gitea-安装" class="headerlink" title="Gitea 安装"></a>Gitea 安装</h3><p>首先在官网上找到 <strong>Docker Compose</strong> 的安装方式。</p>
<p><code>gitea rootless</code>和<code>gitea</code>版本区别，前者是通过 gitea 内部的 ssh 进行管理，后者通过 openSSH 进行管理。</p>
<p>文档地址：<a href="https://docs.gitea.com/zh-cn/installation/install-with-docker-rootless">使用 Docker 安装 (rootless)</a></p>
<p>然后在宝塔上添加 docker 项目模板。如果是自行构建的也可以把新建的<code>docker-compose.yml</code>文件放在你想存放的目录下。</p>
<p>这里选择自行构建，先创建一个运行目录和<code>docker-compose</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p gitea/&#123;data,config&#125;</span><br><span class="line">cd gitea</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>然后将以下内容粘贴到 <code>docker-compose.yml</code> 文件里面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gitea/gitea:1.20.5-rootless</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/var/lib/gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/etc/gitea</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/timezone:/etc/timezone:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2222:2222&quot;</span></span><br></pre></td></tr></table></figure>

<p>赋予指定 docker 卷的用户&#x2F;组，默认情况下，Docker 中的 Gitea 将使用 uid:1000 gid:1000。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chown 1000:1000 config/ data/</span><br></pre></td></tr></table></figure>

<p>然后进入刚刚创建的 gitea 的目录，检查目录下有没有<code>docker-compose.yml</code>文件。确认存在就启动。</p>
<ul>
<li><code>docker-compose up -d</code>: 拉起 docker-compose 所包含服务，并以守护进程方式运行</li>
<li><code>docker-compose restart</code>: 重启 docker-compose 所有服务</li>
<li><code>docker-compose down</code>: 关闭 docker-compose 所有服务</li>
<li><code>docker-compose logs -f</code> : 查看运行日志</li>
</ul>
<p>以上是不使用数据库，只使用 SQlite3 来运行，如果数据量不大情况下 SQlite3 完全可以胜任，如果是多人协作，那就选择数据库会更加好。<br>更多安装详情去官网文档就可以找到。</p>
<h3 id="Gitea-使用"><a href="#Gitea-使用" class="headerlink" title="Gitea 使用"></a>Gitea 使用</h3><h4 id="git-客户端以-ssh-的方式访问"><a href="#git-客户端以-ssh-的方式访问" class="headerlink" title="git 客户端以 ssh 的方式访问"></a>git 客户端以 ssh 的方式访问</h4><p>创建客户端的密钥和公钥,然后在 gitea 的个人设置-SSH&#x2F;GPG 密钥下，添加公钥。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">mkdir -p .ssh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成密钥对</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看公钥</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>测试仓库到客户端链接</p>
<p>这里我自定义了 ssh 的端口所以要带上端口进行测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@106.199.x.x -p 222</span><br><span class="line">---------------------------------</span><br><span class="line">Hi there, jun! You&#x27;ve successfully authenticated with the key named git@xx.com, but Gitea does not provide shell access.</span><br><span class="line">If this is unexpected, please log in with password and setup Gitea under another user.</span><br></pre></td></tr></table></figure>

<p>这样看起来就验证成功了，我们来拉取一个 git 库试试。仓库的 http&#x2F;ssh 的地址可以在仓库页面右上角找到。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone ssh://git@106.199.x.x:222/Jun/test.git</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>折腾日志</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Gitea</tag>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title>测试语雀API</title>
    <url>/posts/124306671110.html</url>
    <content><![CDATA[<p>测试语雀 API.0……</p>
]]></content>
      <categories>
        <category>分类</category>
      </categories>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>测试一下语雀API构建</title>
    <url>/posts/124306610.html</url>
    <content><![CDATA[<p>测试语雀 API.0……</p>
]]></content>
      <categories>
        <category>分类</category>
      </categories>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础玩转 Hexo ：本地化部署</title>
    <url>/posts/45333.html</url>
    <content><![CDATA[<blockquote>
<p>有一些东西，用过不久就遗忘了，等在使用的时候，再各种去翻资料，再加上国内的搜索环境，所以要留下有点脚印。</p>
</blockquote>
<h2 id="认识-Hexo"><a href="#认识-Hexo" class="headerlink" title="认识 Hexo"></a>认识 Hexo</h2><p>Hexo 使用 node.js 编写，生成静态网页的速度也很迅速。</p>
<p>支持 Markdown 渲染，部署方便，可以一条指令部署到 Github pages 等平台。</p>
<p>插件丰富+中文文档，也降低入门的门槛。</p>
<h3 id="必备技能"><a href="#必备技能" class="headerlink" title="必备技能"></a>必备技能</h3><ul>
<li><del>node.js 基础知识</del></li>
<li><del>Git 基础知识</del></li>
<li>Markdown 基本知识</li>
<li>Html、css、JavaScript 等知识</li>
<li><del>npm install 和 uninstall</del></li>
<li>……</li>
</ul>
<p>看到这里，你不要被吓到关闭页面。除了 Markdown，其他都可以不用熟练掌握，有空也可以学习一下（Markdown 是必备技能，文章的排版插图都需要，但是还是要好好复习一下）。</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>在安装之前，你需要安装以下两个软件：</p>
<ul>
<li><a href="https://git-scm.com/">Git</a></li>
<li><a href="https://nodejs.org/zh-cn">nodejs</a></li>
</ul>
<p>如果已经安装好以上工具，可以直接跳过，往下看。</p>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>。</li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li>
<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>
<li>Linux (Arch 系列)： <code>sudo pacman -S git</code></li>
</ul>
<blockquote>
<p><strong>Mac 用户</strong>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p>
</blockquote>
<blockquote>
<p><strong>Windows 用户</strong>对于中国大陆地区用户，可以前往 <a href="https://npmmirror.com/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p>
</blockquote>
<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/zh-cn/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npmmirror.com/mirrors/node/">淘宝 Node.js 镜像</a> 下载。</p>
<p>其它的安装方法：</p>
<ul>
<li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li>
<li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li>
<li>Linux（DEB&#x2F;RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li>
<li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/zh-cn/download/package-manager/">指导</a>。</li>
</ul>
<h4 id="切换-npm-为淘宝-npm-镜像"><a href="#切换-npm-为淘宝-npm-镜像" class="headerlink" title="切换 npm 为淘宝 npm 镜像"></a>切换 npm 为淘宝 npm 镜像</h4><p>国内的网络环境不是很好，访问外网的速度不是理想的时候，可以进行切换，提高下载速度。</p>
<p>在 <code>Git bash</code>命令行进行切换，如果遇到权限问题，请使用管理员身份运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局替换命令</span><br><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line"># 查看版本</span><br><span class="line">npm get registry</span><br><span class="line"></span><br><span class="line"># 切换官方命令</span><br><span class="line">npm config set registry http://www.npmjs.org</span><br></pre></td></tr></table></figure>

<h3 id="安装-Hexo-程序"><a href="#安装-Hexo-程序" class="headerlink" title="安装 Hexo 程序"></a>安装 Hexo 程序</h3><ol>
<li></li>
</ol>
<h3 id="在-Git-bash-Here-命令行"><a href="#在-Git-bash-Here-命令行" class="headerlink" title="在 Git bash Here   命令行"></a>在 <code>Git bash Here</code>   命令行</h3><ol start="2">
<li></li>
</ol>
<p>输入官方安装命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>看看安装版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo v</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<h3 id="创建-hexo-目录"><a href="#创建-hexo-目录" class="headerlink" title="创建 hexo 目录"></a>创建 hexo 目录</h3><ol start="3">
<li></li>
</ol>
<p>这个目录是存放主题、运行文件、写的博文、生成的静态网站文件等等都在这里完成。</p>
<p>在指定的文件夹，选择 <code>Git Bash Here</code> 输入指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 建立你的网站根目录，名字自己修改一下</span><br><span class="line">mkdir &lt;blog_name&gt;</span><br></pre></td></tr></table></figure>

<p>然后往这个文件夹里面，初始化 hexo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;blog_name&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><ol start="4">
<li></li>
</ol>
<p>默认的主题应该没有什么人使用吧？换一个赏心悦目一下！</p>
<p>这里使用安知鱼的 hexo 主题，就是本站的主题一样，其他主题切换的方法也是差不多的。</p>
<p>在 <code>Git Bash</code> 里面输入获取主题的 GitHub 地址，并安装到 <code>themes</code>目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure>

<p>安装主题后，要进行主题的运用，修改安装目录下 <code>_config.yml</code>配置文件，修改成刚刚下载主题的名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改为主题的名称</span><br><span class="line">theme: anzhiyu</span><br></pre></td></tr></table></figure>

<h3 id="安装-pug-和-stylus-渲染插件"><a href="#安装-pug-和-stylus-渲染插件" class="headerlink" title="安装 pug 和 stylus 渲染插件"></a>安装 pug 和 stylus 渲染插件</h3><p>这里是安知鱼主题的需要的应用拓展的，安装一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>

<ol start="4">
<li></li>
</ol>
<h3 id="配置网站信息"><a href="#配置网站信息" class="headerlink" title="配置网站信息"></a>配置网站信息</h3><ol start="5">
<li></li>
</ol>
<h4 id="网站相关信息"><a href="#网站相关信息" class="headerlink" title="网站相关信息"></a>网站相关信息</h4><p>在安装文件夹 <code>_config.yml</code> 这个文件里配置！更多配置可以看一下官方文档。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span></span><br><span class="line"><span class="attr">language:</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>网站标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>description</code></td>
<td>网站描述</td>
</tr>
<tr>
<td><code>keywords</code></td>
<td>网站关键词</td>
</tr>
<tr>
<td><code>author</code></td>
<td>作者名字</td>
</tr>
<tr>
<td><code>language</code></td>
<td>网站使用的语言</td>
</tr>
<tr>
<td><code>timezone</code></td>
<td>网站时区：详见<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a></td>
</tr>
</tbody></table>
<p>更多的文档资料请查看<a href="https://hexo.io/zh-cn/docs/configuration">Hexo 官方文档 </a></p>
<h2 id="Hexo-相关命令"><a href="#Hexo-相关命令" class="headerlink" title="Hexo 相关命令"></a>Hexo 相关命令</h2><h3 id="hexo-init-name"><a href="#hexo-init-name" class="headerlink" title="hexo init [name]"></a><code>hexo init [name]</code></h3><p>这个是 hexo 的初始化命令，<code>[name]</code>代表你要初始化的目录路径，<code>hexo init</code>是初始化当前文件夹</p>
<h3 id="hexo-new-layout"><a href="#hexo-new-layout" class="headerlink" title="hexo new [layout] &lt;title&gt;"></a><code>hexo new [layout] &lt;title&gt;</code></h3><p>这个命令是新建文章或页面用的命令。其中 <code>[layout]</code> 表示他的模板（即页面或者文章）， <code>&lt;title&gt;</code> 表示标题。</p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
<th>详解</th>
</tr>
</thead>
<tbody><tr>
<td><code>post</code></td>
<td><code>source/_posts</code></td>
<td>文章页面</td>
</tr>
<tr>
<td><code>page</code></td>
<td><code>source</code></td>
<td>页面页面</td>
</tr>
</tbody></table>
<p><code>hexo naw post hello</code>，表示在 <code>_posts</code>创建了一篇为 <code>hello</code>的文章</p>
<h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a><code>hexo server</code></h3><p>当你你想浏览本地生成网站的时候，使用这个命令。</p>
<p>命令可以简写为 <code>hexo s</code></p>
<p>默认地址为 <code>http://localhost:4000</code> 如果想修改端口号，可以在 <code>Git Bash</code> 输入 <code>hexo s -p 端口</code></p>
<h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a><code>hexo generate</code></h3><p>这个命令是生成网站静态文件的时候用的，生成后网页将会放在根目录下面的 <code>public</code> 文件夹里。</p>
<p>命令也可以简写为 <code>hexo g</code></p>
<h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><code>hexo clean</code></h3><p>这个命令用来清空 <code>public</code> 文件夹。</p>
<p>命令可以简写为 <code>hexo cl</code></p>
<h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a><code>hexo deploy</code></h3><p>这个命令用来部署网站，使用此命令将会把生成好的页面（即 <code>public</code> 文件夹里的内容）部署到指定的地方上。</p>
<p>命令可以简写为 <code>hexo d</code></p>
<h3 id="hexo-version"><a href="#hexo-version" class="headerlink" title="hexo version"></a><code>hexo version</code></h3><p>这个命令用来输出你所使用的 Hexo 目前的版本号。</p>
<h3 id="一键本地预览"><a href="#一键本地预览" class="headerlink" title="一键本地预览"></a>一键本地预览</h3><p>清理本地<code>public</code>文件夹，重新生成静态文件到<code>public</code>,运行本地代理服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以这样</span></span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客构建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>Git</tag>
        <tag>Node</tag>
      </tags>
  </entry>
</search>
